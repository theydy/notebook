(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{371:function(t,a,s){"use strict";s.r(a);var v=s(44),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http-相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-相关"}},[t._v("#")]),t._v(" HTTP 相关")]),t._v(" "),s("p",[t._v("HTTP 是一种超文本传输协议，构建于 TCP/IP 协议之上，是一个应用层协议")]),t._v(" "),s("h2",{attrs:{id:"http-协议的主要特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-协议的主要特点"}},[t._v("#")]),t._v(" HTTP 协议的主要特点")]),t._v(" "),s("p",[t._v("HTTP 具有 灵活可扩展、无连接、无状态、可靠传输、明文传输的特点。")]),t._v(" "),s("ul",[s("li",[t._v("灵活可扩展：1. 语义上的自由，只规定了基本格式（如：空格分隔单词、换行分隔字段），其他部分没有严格的语法限制；2. 传输格式的多样性（文本、图片等任意格式）")]),t._v(" "),s("li",[t._v("无连接：每完成一个请求就断开连接，HTTP 1.1 开始默认开启 keep-alive 长连接")]),t._v(" "),s("li",[t._v("无状态：单从 HTTP 协议上没有办法识别两次连接者身份，所以后来加入 cookie")]),t._v(" "),s("li",[t._v("可靠传输：HTTP 基于 TCP 协议，TCP 协议拥有可靠传输的特性")]),t._v(" "),s("li",[t._v("明文传输：协议里的报文直接使用文本形式传输，HTTP 2 后改为二进制传输")])]),t._v(" "),s("h2",{attrs:{id:"http-报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-报文"}},[t._v("#")]),t._v(" HTTP 报文")]),t._v(" "),s("h3",{attrs:{id:"请求报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[t._v("#")]),t._v(" 请求报文")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("request-url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("headers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("entity-body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"响应报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[t._v("#")]),t._v(" 响应报文")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("state-code")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("state-desc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("headers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("entity-body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"get-与-post-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-与-post-区别"}},[t._v("#")]),t._v(" GET 与 POST 区别")]),t._v(" "),s("p",[t._v("实际上没什么本质不同")]),t._v(" "),s("ul",[s("li",[t._v("语义不同，GET 获取数据，POST 修改数据")]),t._v(" "),s("li",[t._v("GET 回退没有影响，POST 会再次发送数据")]),t._v(" "),s("li",[t._v("GET 会被浏览器缓存下来，留下历史记录，POST 不会")]),t._v(" "),s("li",[t._v("GET 是幂等的，POST 不是（幂等表示执行相同的操作，结果也是相同的）")])]),t._v(" "),s("h2",{attrs:{id:"http-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1"}},[t._v("#")]),t._v(" HTTP 1")]),t._v(" "),s("p",[t._v("http 1 默认使用的是短连接，并且缓存相关的头部字段只有 Expires 和 Last-Modified")]),t._v(" "),s("p",[t._v("http 1.1 默认开启 keep-alive 长连接，并且添加了 Cache-Control 和 Etag 这两个缓存相关的头部字段。")]),t._v(" "),s("h2",{attrs:{id:"http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP 2")]),t._v(" "),s("p",[t._v("http 2 与 http 1 最大的变化是，在应用层和传输层之间加了「二进制分帧层」，原本的明文信息会在这一层转为二进制格式的数据，并且被分割为更小的单位「帧」进行传输，基于此，http 2 真正实现了多路复用，可以在同一时间使用一个 TCP 连接发送多个 http 请求，在 http 的层面解决了队头阻塞的问题。其他的不同点：头部压缩（在服务端和客户端之间建立哈希表，通过索引的方式压缩头部）、服务端推送。")]),t._v(" "),s("p",[t._v("HTTP 2 主要有如下改变：")]),t._v(" "),s("ul",[s("li",[t._v("头部压缩：在服务端和客户端之间建立哈希表，通过索引的方式压缩头部。")]),t._v(" "),s("li",[t._v("二进制分帧传输：HTTP 2 不再使用明文传输数据，而是将报文转为二进制格式传输，应用层(HTTP 2)和传输层(TCP)之间增加一个二进制分帧层，在二进制分帧层中 HTTP 2 会将所有传输的信息分割为更小的单位帧，并对它们采用二进制格式的编码。")]),t._v(" "),s("li",[t._v("多路复用：HTTP 2 允许同时通过单一的连接发起多重的请求-响应消息，由于 HTTP 2 加入了二进制分帧层，在每一帧中都有一个流标识，所以不同的 HTTP 请求的帧不分先后顺序，也就不需要排队等待。")]),t._v(" "),s("li",[t._v("服务端推送：服务器可以对客户端的一个请求发送多个响应。")])]),t._v(" "),s("p",[t._v("HTTP 2 存在的最大的问题是：由于底层还是使用的 TCP 协议，所以在连接中出现丢包的情况下，需要等待重传，这会导致后面的所有数据被阻塞，这时对于 HTTP 1 来说，由于开启多个 TCP 连接，剩余的 TCP 连接还可以正常传输数据。所以未来的 HTTP 3 Google 才考虑使用 QUIC 协议替换 TCP 协议，QUIC 协议是基于 UDP。")]),t._v(" "),s("h2",{attrs:{id:"http-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP 3")]),t._v(" "),s("p",[t._v("http 3 不再基于 TCP 协议，而是改为 QUIC 协议，QUIC 基于 UDP 。")]),t._v(" "),s("h2",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("p",[t._v("HTTPS 协议是由 SSL + HTTP 协议构建的可进行加密传输，身份认证的网络协议。其原理是在 HTTP 和 TCP 之间建立了一个中间层，这个中间层的核心就是对数据加解密。TLS 是更新，更安全的 SSL 版本，TLS 中使用了两种加密技术：对称加密，非对称加密。")]),t._v(" "),s("h3",{attrs:{id:"https-加解密过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-加解密过程"}},[t._v("#")]),t._v(" HTTPS 加解密过程")]),t._v(" "),s("p",[t._v("https 其实就是在 HTTP 和 TCP 之间加一个对数据进行加解密的中间层。")]),t._v(" "),s("p",[t._v("它们的加密过程首先是非对称加密，")]),t._v(" "),s("p",[t._v("客户端发送 random 1 和加密方法列表；")]),t._v(" "),s("p",[t._v("服务端发送 random 2 、数字证书和加密方法；")]),t._v(" "),s("p",[t._v("客户端确认数字证书有效，然后发送使用证书中的公钥加密后的 random 3；")]),t._v(" "),s("p",[t._v("服务端使用私钥获取 random 3；")]),t._v(" "),s("p",[t._v("客户端服务端使用这三个随机数和相同的加密方法生成最终的密钥")]),t._v(" "),s("p",[t._v("后续就可以使用对称加密。")]),t._v(" "),s("h2",{attrs:{id:"浏览器缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),s("h3",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),s("p",[t._v("Expires：过期时间")]),t._v(" "),s("p",[t._v("Cache-Control：max-age=3600")]),t._v(" "),s("p",[t._v("当 Expires 和 Cache-Control 同时存在的时候，Cache-Control 会优先考虑")]),t._v(" "),s("p",[t._v("Cache-Control 的 no-cache 代表使用协商缓存、no-store 才代表不使用缓存。")]),t._v(" "),s("h3",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[t._v("Last-modified / If-modified-Since：即最后修改时间，在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，浏览器接收到后，如果再次请求，会在请求头中携带 If-Modified-Since 字段")]),t._v(" "),s("p",[t._v("Etag / If-None-Match：服务器根据当前文件的内容，给文件生成的唯一标识")]),t._v(" "),s("p",[t._v("当 Last-modified 和 Etag 同时存在的时候，ETag 会优先考虑。")]),t._v(" "),s("h2",{attrs:{id:"http-常见状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-常见状态码"}},[t._v("#")]),t._v(" HTTP 常见状态码")]),t._v(" "),s("ul",[s("li",[t._v("1xx：指示信息，表示请求以接受，继续处理")]),t._v(" "),s("li",[t._v("2xx：成功状态码")]),t._v(" "),s("li",[t._v("301：永久重定向")]),t._v(" "),s("li",[t._v("302：临时重定向")]),t._v(" "),s("li",[t._v("304：命中协商缓存")]),t._v(" "),s("li",[t._v("4xx：客户端错误，请求有语法错误或请求无法实现")]),t._v(" "),s("li",[t._v("5xx：服务器错误，服务器未能实现合法的请求")])]),t._v(" "),s("h2",{attrs:{id:"http-的队头阻塞是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-的队头阻塞是什么"}},[t._v("#")]),t._v(" HTTP 的队头阻塞是什么")]),t._v(" "),s("p",[t._v("在 HTTP 2 之前，当 HTTP 开启长连接时，共用一个 TCP 连接，由于 HTTP 基于 请求-响应 模型，前一个请求没有响应，后一个请求就不会开始，如果当前请求耗时过长，其他的请求就会处于阻塞状态。（这里说的是 HTTP 协议本身的队头阻塞问题，实际上 TCP 协议也存在队头阻塞问题，两者并不相同，TCP 协议队头阻塞问题在于数据包，如果有编号 1、2、3 三个数据包，即使收到了 1、3，但是因为没有 2，3 号数据包依然会等待 2 号数据包到达之后才处理）。\nHTTP 2 后，加入二进制分帧传输，每个请求被拆成最小单位帧在 stream 中传输，实现真正的多路复用，但是 TCP 的队头阻塞还是没有解决，为此 HTTP 3 中将以 QUIC 代替 TCP。")]),t._v(" "),s("h2",{attrs:{id:"http-如何判断数据传输完成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-如何判断数据传输完成"}},[t._v("#")]),t._v(" HTTP 如何判断数据传输完成")]),t._v(" "),s("ol",[s("li",[t._v("判断传输数据是否达到了 Content-Length，发送端在传输的时候会带上 Content-Length，来指明包体的长度。")]),t._v(" "),s("li",[t._v("动态生成的文件没有 Content-Length，这时候会有 Transfer-Encoding: chunked 代替，chunked 编码的数据在最后有一个空 chunked 块，表明本次传输数据结束。")])]),t._v(" "),s("h2",{attrs:{id:"tcp-三次握手、四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手、四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手、四次挥手")]),t._v(" "),s("h3",{attrs:{id:"三次握手流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手流程"}},[t._v("#")]),t._v(" 三次握手流程")]),t._v(" "),s("ul",[s("li",[t._v("客户端：标志位 SYN；seq（序列号）=x")]),t._v(" "),s("li",[t._v("服务端：标志位 SYN、ACK；seq=y、ack（确认序号）=x+1")]),t._v(" "),s("li",[t._v("客户端：标志位 ACK；ack=y+1")])]),t._v(" "),s("h4",{attrs:{id:"为什么需要三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要三次握手"}},[t._v("#")]),t._v(" 为什么需要三次握手")]),t._v(" "),s("p",[t._v("根本原因是因为发送方和接收方建立连接前需要确认双发的初始序列号，但是双方没有一个全局统一的时钟，只有发送方才知道自己发出的序列号是不是过期的，所以最后必须由发送方确认，三次是满足这个条件的最少次数。")]),t._v(" "),s("p",[t._v("如果通信双方的通信次数只有两次，那么发送方一旦发出建立连接的请求之后它就没有办法撤回这一次请求，如果在网络状况复杂或者较差的网络中，发送方连续发送多次建立连接的请求，如果 TCP 建立连接只能通信两次，那么接收方只能选择接受或者拒绝发送方发起的请求，它并不清楚这一次请求是不是由于网络拥堵而早早过期的连接。")]),t._v(" "),s("h3",{attrs:{id:"四次挥手流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手流程"}},[t._v("#")]),t._v(" 四次挥手流程")]),t._v(" "),s("p",[t._v("客户端：标志位 FIN；seq=x")]),t._v(" "),s("p",[t._v("服务端：标志位 ACK；ack=x+1")]),t._v(" "),s("p",[t._v("服务端：标志位 FIN；seq=y")]),t._v(" "),s("p",[t._v("客户端：标志位 ACK；ack=y+1")]),t._v(" "),s("h4",{attrs:{id:"为什么需要四次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要四次握手"}},[t._v("#")]),t._v(" 为什么需要四次握手")]),t._v(" "),s("p",[t._v("因为一方发送 FIN 表示自己这方的数据全部发送完成后，另一方可能还有数据没有发送完，FIN 和 ACK 必须分开。")]),t._v(" "),s("h2",{attrs:{id:"tcp-udp-quic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp-quic"}},[t._v("#")]),t._v(" TCP UDP QUIC")]),t._v(" "),s("h3",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/theydy/notebook/issues/13",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("TCP 是面向连接的，开始传输数据前需要先建立连接")]),t._v(" "),s("li",[t._v("TCP 连接只能是一对一")]),t._v(" "),s("li",[t._v("TCP 提供可靠的交付服务")]),t._v(" "),s("li",[t._v("TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制")])]),t._v(" "),s("h4",{attrs:{id:"tcp-的滑动窗口机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的滑动窗口机制"}},[t._v("#")]),t._v(" TCP 的滑动窗口机制")]),t._v(" "),s("p",[t._v("滑动窗口分为 "),s("strong",[t._v("发送窗口")]),t._v(" 和 "),s("strong",[t._v("接收窗口")]),t._v("，")]),t._v(" "),s("p",[t._v("发送窗口：保存着「已发送但未确认」和「未发送但允许发送」的数据，发送窗口的大小是动态变化的，等于接收窗口和拥塞窗口取小值。")]),t._v(" "),s("p",[t._v("接收窗口：接收窗口的大小等于接收方准备接收的数据大小，接收窗口的大小会通过报文告诉发送方。")]),t._v(" "),s("h4",{attrs:{id:"tcp-的重传机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的重传机制"}},[t._v("#")]),t._v(" TCP 的重传机制")]),t._v(" "),s("p",[t._v("超时重传：超过指定的时间没有响应，就会重传。")]),t._v(" "),s("p",[t._v("快速重传：接收到三次重复确认时，立即重传。")]),t._v(" "),s("h3",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),s("ul",[s("li",[t._v("UDP 无连接")]),t._v(" "),s("li",[t._v("UDP 不保证数据可靠性")]),t._v(" "),s("li",[t._v("UDP 支持多播和广播")])]),t._v(" "),s("h3",{attrs:{id:"quic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" QUIC")]),t._v(" "),s("p",[t._v("HTTP 3 基于 QUIC 实现，QUIC 通过 UDP 修改而成")]),t._v(" "),s("h2",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" websocket")]),t._v(" "),s("p",[t._v("websocket 连接过程")]),t._v(" "),s("p",[t._v("客户端发送请求，header 中包含如下字段")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("Upgrade: websocket\nConnection: Upgrade\n")])])]),s("p",[t._v("服务端返回状态码 101 响应")]),t._v(" "),s("p",[t._v("连接建立完成，后续使用 websocket 通信。")])])}),[],!1,null,null,null);a.default=e.exports}}]);